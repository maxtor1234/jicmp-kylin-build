name: Build jicmp for Kylin ARM (OpenNMS branch)

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Install ARM toolchain and dependencies
      run: |
        sudo apt-get update
        # 安装必要的构建工具和库
        sudo apt-get install -y \
          gcc-arm-linux-gnueabihf \
          g++-arm-linux-gnueabihf \
          autoconf \
          automake \
          libtool \
          pkg-config \
          unzip \
          libtool-bin \
          autotools-dev \
          libltdl-dev \
          automake-1.16  # 安装特定版本的 automake
        
    - name: Download and extract jicmp source
      run: |
        wget https://github.com/OpenNMS/jicmp/archive/refs/heads/jira/JICMP-23.zip -O jicmp-source.zip
        unzip jicmp-source.zip
        mv jicmp-jira-JICMP-23 jicmp-source
        
    - name: Patch build system
      run: |
        cd jicmp-source
        
        # 修复1: 更新过时的宏定义
        sed -i 's/AC_CONFIG_HEADER/AC_CONFIG_HEADERS/' configure.ac
        sed -i 's/AC_HEADER_STDC//' configure.ac
        
        # 修复2: 添加缺失的宏定义
        cat >> aclocal.m4 << 'EOF'
        AC_DEFUN([AM_RPM_INIT], [])
        AC_DEFUN([AM_INIT_AUTOMAKE], [AC_REQUIRE([AC_PROG_INSTALL])])
        AC_DEFUN([AC_ENABLE_STATIC], [])
        AC_DEFUN([AC_PROG_LIBTOOL], [])
        AC_DEFUN([AM_CONDITIONAL], [])
        EOF
        
        # 修复3: 添加必要的宏包含
        echo "m4_include([aclocal.m4])" >> configure.ac
        
    - name: Run autoupdate
      run: |
        cd jicmp-source
        # 运行 autoupdate 来更新过时的宏
        autoupdate || true  # 即使有错误也继续
        
    - name: Regenerate build system
      run: |
        cd jicmp-source
        # 使用特定版本的 automake
        export PATH=/usr/share/automake-1.16:$PATH
        autoreconf -fiv -I m4
        
    - name: Configure and build
      run: |
        cd jicmp-source
        
        # 设置Java环境
        export JAVA_HOME=$JAVA_HOME_8_X64
        export PATH=$JAVA_HOME/bin:$PATH
        
        # 配置ARM交叉编译
        ./configure \
          --host=arm-linux-gnueabihf \
          --prefix=/usr \
          --libdir=/usr/lib/arm-linux-gnueabihf \
          --with-jdk=$JAVA_HOME \
          --disable-rpm \
          --disable-static
        
        # 编译
        make -j4 V=1
        
        # 准备输出
        mkdir -p output
        # 尝试从不同位置复制库文件
        cp src/.libs/libjicmp.so* output/ 2>/dev/null || true
        cp .libs/libjicmp.so* output/ 2>/dev/null || true
        cp jicmp.jar output/
        
        # 验证关键文件
        if [ ! -f "output/libjicmp.so" ]; then
          echo "警告：未找到标准位置的 libjicmp.so，尝试查找其他位置"
          find . -name "libjicmp.so*" -exec cp {} output/ \;
        fi
        
        # 确保至少有一个库文件
        if [ -z "$(ls output/libjicmp.so* 2>/dev/null)" ]; then
          echo "错误：编译后未找到任何 libjicmp.so 文件"
          find . -name "*.so*"
          exit 1
        fi
        
        # 添加构建信息
        echo "Source: OpenNMS/jicmp branch jira/JICMP-23" > output/BUILD_INFO
        echo "Build date: $(date)" >> output/BUILD_INFO
        echo "GitHub Run ID: $GITHUB_RUN_ID" >> output/BUILD_INFO
        echo "Library path: $(find . -name libjicmp.so)" >> output/BUILD_INFO
        
    - name: Package artifacts
      run: |
        cd jicmp-source/output
        tar czf ../jicmp-kylin-arm-opennms.tar.gz *
        cd ..
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jicmp-kylin-arm-opennms
        path: jicmp-source/jicmp-kylin-arm-opennms.tar.gz
        retention-days: 7

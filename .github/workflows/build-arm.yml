name: Build jicmp for Kylin ARM (Official method)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # 官方要求完整克隆以包含子模块
        fetch-depth: 0
        submodules: recursive
        
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          automake \
          autoconf \
          libtool \
          gcc-arm-linux-gnueabihf \
          g++-arm-linux-gnueabihf
        
    - name: Prepare ARM environment
      run: |
        # 设置 ARM 交叉编译工具链
        export CC=arm-linux-gnueabihf-gcc
        export CXX=arm-linux-gnueabihf-g++
        export AR=arm-linux-gnueabihf-ar
        export RANLIB=arm-linux-gnueabihf-ranlib
        export LD=arm-linux-gnueabihf-ld
        
        # 设置 Java 环境
        export JAVA_HOME=$JAVA_HOME_8_X64
        export PATH=$JAVA_HOME/bin:$PATH
        
        # 验证工具链
        arm-linux-gnueabihf-gcc --version
        java -version
        
    - name: Initialize submodules (官方要求步骤)
      run: |
        git submodule update --init --recursive
        
    - name: Regenerate configure scripts
      run: |
        autoreconf -fvi
        
    - name: Configure for ARM
      run: |
        # 官方配置命令，添加 ARM 交叉编译参数
        ./configure \
          --host=arm-linux-gnueabihf \
          --prefix=/usr \
          --libdir=/usr/lib/arm-linux-gnueabihf
        
    - name: Build library
      run: |
        make -j4
        
    - name: Test build artifacts
      run: |
        # 验证关键文件存在
        if [ ! -f "src/.libs/libjicmp.so" ]; then
          echo "错误：未找到 libjicmp.so!"
          find . -name "*.so*"
          exit 1
        fi
        
        # 检查文件架构
        file src/.libs/libjicmp.so
        echo "文件架构检查："
        arm-linux-gnueabihf-objdump -f src/.libs/libjicmp.so | grep architecture
        
    - name: Package artifacts
      run: |
        # 创建输出目录
        mkdir -p output
        
        # 复制核心文件
        cp src/.libs/libjicmp.so* output/
        cp jicmp.jar output/
        
        # 创建安装脚本
        cat > output/install.sh << 'EOF'
        #!/bin/bash
        # 官方安装脚本
        LIB_DIR="/usr/lib"
        JAVA_DIR="/usr/share/java"
        
        # 安装库文件
        sudo install -m 0755 libjicmp.so $LIB_DIR/
        sudo ldconfig
        
        # 安装Java库
        sudo install -m 0644 jicmp.jar $JAVA_DIR/
        
        echo "安装成功！"
        echo "库文件位置: $LIB_DIR/libjicmp.so"
        echo "Java库位置: $JAVA_DIR/jicmp.jar"
        EOF
        
        chmod +x output/install.sh
        
        # 创建构建信息
        echo "Source: OpenNMS/jicmp" > output/BUILD_INFO
        echo "Branch: $(git rev-parse --abbrev-ref HEAD)" >> output/BUILD_INFO
        echo "Commit: $(git rev-parse HEAD)" >> output/BUILD_INFO
        echo "Build date: $(date)" >> output/BUILD_INFO
        echo "Target: ARM Linux (gnueabihf)" >> output/BUILD_INFO
        
        # 打包
        tar czf jicmp-kylin-arm.tar.gz -C output .
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jicmp-kylin-arm
        path: jicmp-kylin-arm.tar.gz
        retention-days: 7

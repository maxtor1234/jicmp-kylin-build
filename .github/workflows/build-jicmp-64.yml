name: Build jicmp for Kylin ARM64

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/8.0.452-9/x64
      JAVA_HOME_8_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/8.0.452-9/x64

    steps:
    - name: Configure Ubuntu ARM64 sources
      run: |
        sudo tee /etc/apt/sources.list <<EOF
        deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy main restricted
        deb [arch=amd64] http://archive.ubuntu.com/ubuntu jammy-updates main restricted
        deb [arch=arm64] http://ports.ubuntu.com jammy main restricted
        deb [arch=arm64] http://ports.ubuntu.com jammy-updates main restricted
        EOF
        sudo dpkg --add-architecture arm64
        sudo apt-get update -y

    - name: Checkout code with submodules
      uses: actions/checkout@v4
      with:
        repository: 'OpenNMS/jicmp'
        ref: 'jira/JICMP-23'
        submodules: 'recursive'
        path: 'jicmp-source'

    - name: Verify source structure
      run: |
        cd jicmp-source
        echo "Source directory contents:"
        ls -la
        if [ ! -f configure.ac ] || [ ! -d macros ]; then
          echo "ERROR: Missing essential build files"
          exit 1
        fi

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Install build dependencies
      run: |
        sudo apt-get install -y \
          automake \
          autoconf \
          libtool \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu \
          libc6-dev-arm64-cross \
          make \
          pkg-config

    - name: Prepare build environment
      run: |
        cd jicmp-source
        git submodule update --init --recursive
        if [ ! -d m4 ]; then mkdir m4; fi
        [ -d macros ] && cp macros/* m4/ 2>/dev/null || true

    - name: Generate build system
      run: |
        cd jicmp-source
        autoreconf -fvi -I m4 || {
          echo "Fallback to manual autotools generation"
          aclocal -I m4
          autoheader
          automake --add-missing --copy
          autoconf
        }

    - name: Configure for ARM64
      run: |
        cd jicmp-source
        export CC=aarch64-linux-gnu-gcc
        export CXX=aarch64-linux-gnu-g++
        export AR=aarch64-linux-gnu-ar
        export RANLIB=aarch64-linux-gnu-ranlib
        export LD=aarch64-linux-gnu-ld
        export PATH=$JAVA_HOME/bin:$PATH

        ./configure \
          --host=aarch64-linux-gnu \
          --prefix=/usr \
          --libdir=/usr/lib/aarch64-linux-gnu

    - name: Build with Make
      run: |
        cd jicmp-source
        make -j$(nproc)
        make check || echo "Tests failed but continuing with build"

    - name: Package artifacts
      run: |
        mkdir -p packaging/{lib,jar}
        find jicmp-source -name '*.so*' -exec cp {} packaging/lib \;
        find jicmp-source -name '*.jar' -exec cp {} packaging/jar \;

        cat > packaging/install.sh <<'EOF'
        #!/bin/bash
        set -e
        LIB_DIR="/usr/lib/aarch64-linux-gnu"
        JAVA_DIR="/usr/share/java"

        echo "Installing native libraries..."
        sudo install -m 0755 lib/*.so* "$LIB_DIR"/
        sudo ldconfig

        echo "Installing Java libraries..."
        sudo install -m 0644 jar/*.jar "$JAVA_DIR"/

        echo "jicmp installation complete"
        EOF
        chmod +x packaging/install.sh

        tar czf jicmp-kylin-arm64-$(date +%Y%m%d).tar.gz -C packaging .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: jicmp-arm64-build
        path: jicmp-kylin-arm64-*.tar.gz
        retention-days: 7
